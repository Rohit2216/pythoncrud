**MongoDB Schema:**

```
{
  "_id": ObjectId(),
  "driver_id": ObjectId(),
  "passenger_id": ObjectId(),
  "start_location": String,
  "end_location": String,
  "distance": Number,
  "ride_time": Number,
  "fare": Number
}

```

**SQL Schema:**

```
CREATE TABLE Rides (
    id INT PRIMARY KEY,
    driver_id INT,
    passenger_id INT,
    start_location VARCHAR(255),
    end_location VARCHAR(255),
    distance DECIMAL(5,2),
    ride_time DECIMAL(5,2),
    fare DECIMAL(6,2)
);

```

**Problem 26:**

- **Prerequisite**: Understand creating tables in SQL / collections in MongoDB
- **Problem**: Create a **`Rides`** table / collection with the fields defined above.

db.createCollection("Rides", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["driver_id", "passenger_id", "start_location", "end_location", "distance", "ride_time", "fare"],
            properties: {
                driver_id: { bsonType: "objectId" },
                passenger_id: { bsonType: "objectId" },
                start_location: { bsonType: "string" },
                end_location: { bsonType: "string" },
                distance: { bsonType: "double" },
                ride_time: { bsonType: "double" },
                fare: { bsonType: "double" }
            }
        }
    }
});


CREATE TABLE Rides (
    id INT PRIMARY KEY,
    driver_id INT,
    passenger_id INT,
    start_location VARCHAR(255),
    end_location VARCHAR(255),
    distance DECIMAL(5,2),
    ride_time DECIMAL(5,2),
    fare DECIMAL(6,2)
);




**Problem 27:**

- **Prerequisite**: Understand inserting data into SQL tables / MongoDB collections
- **Problem**: Insert five rows / documents into the **`Rides`** table / collection with data of your choice.

db.Rides.insertMany([
    {
        driver_id: ObjectId(),
        passenger_id: ObjectId(),
        start_location: "A Street",
        end_location: "B Street",
        distance: 10.5,
        ride_time: 25,
        fare: 15.75
    },
    // Insert other rows...
]);


INSERT INTO Rides (id, driver_id, passenger_id, start_location, end_location, distance, ride_time, fare)
VALUES
    (1, 1, 2, 'A Street', 'B Street', 10.5, 25, 15.75),
    -- Insert other rows...
;



**Problem 28:**

- **Prerequisite**: Understand how to order data in SQL / MongoDB
- **Problem**: Write a query to fetch all rides, ordered by **`fare`** in descending order.


SELECT *
FROM Rides
ORDER BY fare DESC;


db.Rides.find().sort({ fare: -1 });





**Problem 29:**

- **Prerequisite**: Understand using math operations in SQL / MongoDB
- **Problem**: Write a query to calculate the total **`distance`** and total **`fare`** for all rides.


SELECT SUM(distance) AS total_distance, SUM(fare) AS total_fare
FROM Rides;


db.Rides.aggregate([
    { $group: { _id: null, total_distance: { $sum: "$distance" }, total_fare: { $sum: "$fare" } } }
]);



**Problem 30:**

- **Prerequisite**: Understand how to use the AVG function in SQL / MongoDB's aggregate functions
- **Problem**: Write a query to calculate the average **`ride_time`** of all rides.


SELECT AVG(ride_time) AS average_ride_time
FROM Rides;


db.Rides.aggregate([
    { $group: { _id: null, avgRideTime: { $avg: "$ride_time" } } }
]);




**Problem 31:**

- **Prerequisite**: Understand using string patterns in SQL (LIKE clause) / using regex in MongoDB
- **Problem**: Write a query to fetch all rides whose **`start_location`** or **`end_location`** contains 'Downtown'.

SELECT *
FROM Rides
WHERE start_location LIKE '%Downtown%' OR end_location LIKE '%Downtown%';


db.Rides.find({
    $or: [
        { start_location: /Downtown/ },
        { end_location: /Downtown/ }
    ]
});



**Problem 32:**

- **Prerequisite**: Understand how to use the COUNT function in SQL / MongoDB's aggregate functions
- **Problem**: Write a query to count the number of rides for a given **`driver_id`**.

SELECT COUNT(*) AS ride_count
FROM Rides
WHERE driver_id = 1; -- Replace with the desired driver_id


db.Rides.count({ driver_id: ObjectId("your_driver_id_here") });



**Problem 33:**

- **Prerequisite**: Understand data updating in SQL / MongoDB
- **Problem**: Write a query to update the **`fare`** of the ride with **`id`** 4.

UPDATE Rides
SET fare = 20.00 -- New fare value
WHERE id = 4; -- Replace with the desired ride_id

db.Rides.updateOne(
    { _id: ObjectId("your_ride_id_here") },
    { $set: { fare: 20.00 } }
);



**Problem 34:**

- **Prerequisite**: Understand using GROUP BY in SQL / MongoDB's aggregate functions
- **Problem**: Write a query to calculate the total **`fare`** for each **`driver_id`**.

SELECT driver_id, SUM(fare) AS total_fare
FROM Rides
GROUP BY driver_id;


db.Rides.aggregate([
    { $group: { _id: "$driver_id", totalFare: { $sum: "$fare" } } }
]);



**Problem 35:**

- **Prerequisite**: Understand data deletion in SQL / MongoDB
- **Problem**: Write a query to delete the ride with **`id`** 2.


DELETE FROM Rides
WHERE id = 2; -- Replace with the desired ride_id


db.Rides.deleteOne({ _id: ObjectId("your_ride_id_here") });
